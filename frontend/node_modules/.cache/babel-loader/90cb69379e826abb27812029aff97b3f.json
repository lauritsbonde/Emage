{"ast":null,"code":"var _jsxFileName = \"/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmojiImage = _ref => {\n  _s();\n\n  let {\n    emojis\n  } = _ref;\n  const canvasRef = React.useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d'); //Our first draw\n\n    context.fillStyle = '#000000';\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n    draw(context);\n  }, [draw]);\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(50, 100, 20, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  const fontSize = '6px';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [emojis.map((row, rowindex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 0,\n          height: '7px',\n          width: '95%',\n          margin: '0 auto'\n        },\n        children: row.map((emoji, index) => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              display: 'inline-block',\n              margin: 0,\n              padding: '1px',\n              fontSize: 100 / row.length + 'em',\n              width: 100 / row.length + '%',\n              boxSizing: 'border-box'\n            },\n            children: emoji === 'empty' ? '\\u00A0' : emoji\n          }, rowindex + ':' + index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 9\n          }, this);\n        })\n      }, 'row:' + rowindex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 6\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, this);\n};\n\n_s(EmojiImage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = EmojiImage;\nexport default EmojiImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmojiImage\");","map":{"version":3,"sources":["/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js"],"names":["React","createContext","useRef","EmojiImage","emojis","canvasRef","useEffect","canvas","current","context","getContext","fillStyle","fillRect","width","height","draw","ctx","beginPath","arc","Math","PI","fill","fontSize","map","row","rowindex","padding","margin","emoji","index","display","length","boxSizing"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,MAA/B,QAA6C,OAA7C;;;AAEA,MAAMC,UAAU,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;AAClC,QAAMC,SAAS,GAAGL,KAAK,CAACE,MAAN,CAAa,IAAb,CAAlB;AACAI,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMC,MAAM,GAAGF,SAAS,CAACG,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB,CAFe,CAGf;;AACAD,IAAAA,OAAO,CAACE,SAAR,GAAoB,SAApB;AACAF,IAAAA,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBH,OAAO,CAACF,MAAR,CAAeM,KAAtC,EAA6CJ,OAAO,CAACF,MAAR,CAAeO,MAA5D;AACAC,IAAAA,IAAI,CAACN,OAAD,CAAJ;AACA,GAPQ,EAON,CAACM,IAAD,CAPM,CAAT;;AASA,QAAMA,IAAI,GAAIC,GAAD,IAAS;AACrBA,IAAAA,GAAG,CAACL,SAAJ,GAAgB,SAAhB;AACAK,IAAAA,GAAG,CAACC,SAAJ;AACAD,IAAAA,GAAG,CAACE,GAAJ,CAAQ,EAAR,EAAY,GAAZ,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,IAAIC,IAAI,CAACC,EAAjC;AACAJ,IAAAA,GAAG,CAACK,IAAJ;AACA,GALD;;AAOA,QAAMC,QAAQ,GAAG,KAAjB;AACA,sBACC;AAAA,eACElB,MAAM,CAACmB,GAAP,CAAW,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC9B,0BACC;AAA6B,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE,CAAX;AAAcZ,UAAAA,MAAM,EAAE,KAAtB;AAA6BD,UAAAA,KAAK,EAAE,KAApC;AAA2Cc,UAAAA,MAAM,EAAE;AAAnD,SAApC;AAAA,kBACEH,GAAG,CAACD,GAAJ,CAAQ,CAACK,KAAD,EAAQC,KAAR,KAAkB;AAC1B,8BACC;AAEC,YAAA,KAAK,EAAE;AAAEC,cAAAA,OAAO,EAAE,cAAX;AAA2BH,cAAAA,MAAM,EAAE,CAAnC;AAAsCD,cAAAA,OAAO,EAAE,KAA/C;AAAsDJ,cAAAA,QAAQ,EAAE,MAAME,GAAG,CAACO,MAAV,GAAmB,IAAnF;AAAyFlB,cAAAA,KAAK,EAAE,MAAMW,GAAG,CAACO,MAAV,GAAmB,GAAnH;AAAwHC,cAAAA,SAAS,EAAE;AAAnI,aAFR;AAAA,sBAIEJ,KAAK,KAAK,OAAV,GAAoB,QAApB,GAA+BA;AAJjC,aACMH,QAAQ,GAAG,GAAX,GAAiBI,KADvB;AAAA;AAAA;AAAA;AAAA,kBADD;AAQA,SATA;AADF,SAAU,SAASJ,QAAnB;AAAA;AAAA;AAAA;AAAA,cADD;AAcA,KAfA,CADF,eAiBC;AAAQ,MAAA,GAAG,EAAEpB;AAAb;AAAA;AAAA;AAAA;AAAA,YAjBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAqBA,CAxCD;;GAAMF,U;;KAAAA,U;AA0CN,eAAeA,UAAf","sourcesContent":["import React, { createContext, useRef } from 'react';\n\nconst EmojiImage = ({ emojis }) => {\n\tconst canvasRef = React.useRef(null);\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\t//Our first draw\n\t\tcontext.fillStyle = '#000000';\n\t\tcontext.fillRect(0, 0, context.canvas.width, context.canvas.height);\n\t\tdraw(context);\n\t}, [draw]);\n\n\tconst draw = (ctx) => {\n\t\tctx.fillStyle = '#000000';\n\t\tctx.beginPath();\n\t\tctx.arc(50, 100, 20, 0, 2 * Math.PI);\n\t\tctx.fill();\n\t};\n\n\tconst fontSize = '6px';\n\treturn (\n\t\t<div>\n\t\t\t{emojis.map((row, rowindex) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={'row:' + rowindex} style={{ padding: 0, height: '7px', width: '95%', margin: '0 auto' }}>\n\t\t\t\t\t\t{row.map((emoji, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\tkey={rowindex + ':' + index}\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'inline-block', margin: 0, padding: '1px', fontSize: 100 / row.length + 'em', width: 100 / row.length + '%', boxSizing: 'border-box' }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{emoji === 'empty' ? '\\u00A0' : emoji}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<canvas ref={canvasRef}></canvas>\n\t\t</div>\n\t);\n};\n\nexport default EmojiImage;\n"]},"metadata":{},"sourceType":"module"}