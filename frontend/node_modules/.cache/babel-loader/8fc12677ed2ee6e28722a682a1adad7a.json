{"ast":null,"code":"var _jsxFileName = \"/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmojiImage = _ref => {\n  _s();\n\n  let {\n    emojis,\n    backgroundColor,\n    scaling\n  } = _ref;\n  const canvasRef = useRef(null);\n  const scale = {\n    width: window.innerWidth / emojis[0].length * scaling,\n    height: window.innerHeight / emojis.length * scaling\n  };\n\n  const draw = ctx => {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000';\n    const fontSize = ctx.canvas.width / (emojis[0].length * (10 / 8));\n    ctx.font = fontSize + 'px serif';\n\n    for (let i = 0; i < emojis.length; i++) {\n      ctx.fillText(emojis[i], 0, i * scale.height);\n    }\n\n    ctx.fill();\n  }; // download canvas as png\n\n\n  const download = () => {\n    const link = document.createElement('a');\n    link.download = 'emoji.png';\n    link.href = canvasRef.current.toDataURL();\n    link.click();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let animationFrameId;\n    draw(context);\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: emojis[0].length * scale.width + 'px',\n      height: emojis.length * scale.height + 'px'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        download;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n};\n\n_s(EmojiImage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = EmojiImage;\nexport default EmojiImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmojiImage\");","map":{"version":3,"sources":["/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js"],"names":["React","useRef","useEffect","EmojiImage","emojis","backgroundColor","scaling","canvasRef","scale","width","window","innerWidth","length","height","innerHeight","draw","ctx","fillStyle","fillRect","canvas","fontSize","font","i","fillText","fill","download","link","document","createElement","href","current","toDataURL","click","context","getContext","animationFrameId","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,UAAU,GAAG,QAA0C;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,eAAV;AAA2BC,IAAAA;AAA3B,GAAyC;AAC5D,QAAMC,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMO,KAAK,GAAG;AAAEC,IAAAA,KAAK,EAAGC,MAAM,CAACC,UAAP,GAAoBP,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAA/B,GAAyCN,OAAlD;AAA2DO,IAAAA,MAAM,EAAGH,MAAM,CAACI,WAAP,GAAqBV,MAAM,CAACQ,MAA7B,GAAuCN;AAA1G,GAAd;;AAEA,QAAMS,IAAI,GAAIC,GAAD,IAAS;AACrBA,IAAAA,GAAG,CAACC,SAAJ,GAAgBZ,eAAhB;AACAW,IAAAA,GAAG,CAACE,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBF,GAAG,CAACG,MAAJ,CAAWV,KAA9B,EAAqCO,GAAG,CAACG,MAAJ,CAAWN,MAAhD;AACAG,IAAAA,GAAG,CAACC,SAAJ,GAAgB,SAAhB;AACA,UAAMG,QAAQ,GAAGJ,GAAG,CAACG,MAAJ,CAAWV,KAAX,IAAoBL,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,IAAoB,KAAK,CAAzB,CAApB,CAAjB;AACAI,IAAAA,GAAG,CAACK,IAAJ,GAAWD,QAAQ,GAAG,UAAtB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,MAAM,CAACQ,MAA3B,EAAmCU,CAAC,EAApC,EAAwC;AACvCN,MAAAA,GAAG,CAACO,QAAJ,CAAanB,MAAM,CAACkB,CAAD,CAAnB,EAAwB,CAAxB,EAA2BA,CAAC,GAAGd,KAAK,CAACK,MAArC;AACA;;AACDG,IAAAA,GAAG,CAACQ,IAAJ;AACA,GAVD,CAJ4D,CAgB5D;;;AACA,QAAMC,QAAQ,GAAG,MAAM;AACtB,UAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;AACAF,IAAAA,IAAI,CAACD,QAAL,GAAgB,WAAhB;AACAC,IAAAA,IAAI,CAACG,IAAL,GAAYtB,SAAS,CAACuB,OAAV,CAAkBC,SAAlB,EAAZ;AACAL,IAAAA,IAAI,CAACM,KAAL;AACA,GALD;;AAOA9B,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMiB,MAAM,GAAGZ,SAAS,CAACuB,OAAzB;AACA,UAAMG,OAAO,GAAGd,MAAM,CAACe,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAIC,gBAAJ;AAEApB,IAAAA,IAAI,CAACkB,OAAD,CAAJ;AAEA,WAAO,MAAM;AACZvB,MAAAA,MAAM,CAAC0B,oBAAP,CAA4BD,gBAA5B;AACA,KAFD;AAGA,GAVQ,CAAT;AAYA,sBACC;AAAA,4BACC;AAAQ,MAAA,GAAG,EAAE5B,SAAb;AAAwB,MAAA,KAAK,EAAEH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,GAAmBJ,KAAK,CAACC,KAAzB,GAAiC,IAAhE;AAAsE,MAAA,MAAM,EAAEL,MAAM,CAACQ,MAAP,GAAgBJ,KAAK,CAACK,MAAtB,GAA+B;AAA7G;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AACC,MAAA,OAAO,EAAE,MAAM;AACdY,QAAAA,QAAQ;AACR;AAHF;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAUA,CA9CD;;GAAMtB,U;;KAAAA,U;AAgDN,eAAeA,UAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst EmojiImage = ({ emojis, backgroundColor, scaling }) => {\n\tconst canvasRef = useRef(null);\n\tconst scale = { width: (window.innerWidth / emojis[0].length) * scaling, height: (window.innerHeight / emojis.length) * scaling };\n\n\tconst draw = (ctx) => {\n\t\tctx.fillStyle = backgroundColor;\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\t\tctx.fillStyle = '#000000';\n\t\tconst fontSize = ctx.canvas.width / (emojis[0].length * (10 / 8));\n\t\tctx.font = fontSize + 'px serif';\n\t\tfor (let i = 0; i < emojis.length; i++) {\n\t\t\tctx.fillText(emojis[i], 0, i * scale.height);\n\t\t}\n\t\tctx.fill();\n\t};\n\n\t// download canvas as png\n\tconst download = () => {\n\t\tconst link = document.createElement('a');\n\t\tlink.download = 'emoji.png';\n\t\tlink.href = canvasRef.current.toDataURL();\n\t\tlink.click();\n\t};\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\tlet animationFrameId;\n\n\t\tdraw(context);\n\n\t\treturn () => {\n\t\t\twindow.cancelAnimationFrame(animationFrameId);\n\t\t};\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<canvas ref={canvasRef} width={emojis[0].length * scale.width + 'px'} height={emojis.length * scale.height + 'px'}></canvas>\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdownload;\n\t\t\t\t}}\n\t\t\t></button>\n\t\t</div>\n\t);\n};\n\nexport default EmojiImage;\n"]},"metadata":{},"sourceType":"module"}