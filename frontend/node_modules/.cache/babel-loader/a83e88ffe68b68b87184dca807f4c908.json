{"ast":null,"code":"var _jsxFileName = \"/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmojiImage = _ref => {\n  _s();\n\n  let {\n    emojis\n  } = _ref;\n  const canvasRef = useRef(null);\n  const factor = 0.5;\n  const scale = {\n    width: window.innerWidth / emojis[0].length * factor,\n    height: window.innerHeight / emojis.length * factor\n  };\n  console.log(scale);\n\n  const draw = ctx => {\n    ctx.fillStyle = '#fff';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000';\n    ctx.font = antalbogstaver * height / width_ratio / width + 'px serif';\n\n    for (let i = 0; i < emojis.length; i++) {\n      ctx.fillText(emojis[i], 0, i * scale.height);\n    }\n\n    ctx.fill();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let animationFrameId;\n    draw(context);\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: emojis[0].length * scale.width + 'px',\n      height: emojis.length * scale.height + 'px',\n      style: {\n        marginLeft: '10%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this);\n};\n\n_s(EmojiImage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = EmojiImage;\nexport default EmojiImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmojiImage\");","map":{"version":3,"sources":["/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js"],"names":["React","useRef","useEffect","EmojiImage","emojis","canvasRef","factor","scale","width","window","innerWidth","length","height","innerHeight","console","log","draw","ctx","fillStyle","fillRect","canvas","font","antalbogstaver","width_ratio","i","fillText","fill","current","context","getContext","animationFrameId","cancelAnimationFrame","marginLeft"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,UAAU,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;AAClC,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAMK,MAAM,GAAG,GAAf;AACA,QAAMC,KAAK,GAAG;AAAEC,IAAAA,KAAK,EAAGC,MAAM,CAACC,UAAP,GAAoBN,MAAM,CAAC,CAAD,CAAN,CAAUO,MAA/B,GAAyCL,MAAlD;AAA0DM,IAAAA,MAAM,EAAGH,MAAM,CAACI,WAAP,GAAqBT,MAAM,CAACO,MAA7B,GAAuCL;AAAzG,GAAd;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;;AAEA,QAAMS,IAAI,GAAIC,GAAD,IAAS;AACrBA,IAAAA,GAAG,CAACC,SAAJ,GAAgB,MAAhB;AACAD,IAAAA,GAAG,CAACE,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBF,GAAG,CAACG,MAAJ,CAAWZ,KAA9B,EAAqCS,GAAG,CAACG,MAAJ,CAAWR,MAAhD;AACAK,IAAAA,GAAG,CAACC,SAAJ,GAAgB,SAAhB;AACAD,IAAAA,GAAG,CAACI,IAAJ,GAAYC,cAAc,GAAGV,MAAlB,GAA4BW,WAA5B,GAA0Cf,KAA1C,GAAkD,UAA7D;;AACA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,MAAM,CAACO,MAA3B,EAAmCa,CAAC,EAApC,EAAwC;AACvCP,MAAAA,GAAG,CAACQ,QAAJ,CAAarB,MAAM,CAACoB,CAAD,CAAnB,EAAwB,CAAxB,EAA2BA,CAAC,GAAGjB,KAAK,CAACK,MAArC;AACA;;AACDK,IAAAA,GAAG,CAACS,IAAJ;AACA,GATD;;AAWAxB,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMkB,MAAM,GAAGf,SAAS,CAACsB,OAAzB;AACA,UAAMC,OAAO,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAIC,gBAAJ;AAEAd,IAAAA,IAAI,CAACY,OAAD,CAAJ;AAEA,WAAO,MAAM;AACZnB,MAAAA,MAAM,CAACsB,oBAAP,CAA4BD,gBAA5B;AACA,KAFD;AAGA,GAVQ,CAAT;AAYA,sBACC;AAAA,2BAiBC;AAAQ,MAAA,GAAG,EAAEzB,SAAb;AAAwB,MAAA,KAAK,EAAED,MAAM,CAAC,CAAD,CAAN,CAAUO,MAAV,GAAmBJ,KAAK,CAACC,KAAzB,GAAiC,IAAhE;AAAsE,MAAA,MAAM,EAAEJ,MAAM,CAACO,MAAP,GAAgBJ,KAAK,CAACK,MAAtB,GAA+B,IAA7G;AAAmH,MAAA,KAAK,EAAE;AAAEoB,QAAAA,UAAU,EAAE;AAAd;AAA1H;AAAA;AAAA;AAAA;AAAA;AAjBD;AAAA;AAAA;AAAA;AAAA,UADD;AAqBA,CAnDD;;GAAM7B,U;;KAAAA,U;AAqDN,eAAeA,UAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst EmojiImage = ({ emojis }) => {\n\tconst canvasRef = useRef(null);\n\n\tconst factor = 0.5;\n\tconst scale = { width: (window.innerWidth / emojis[0].length) * factor, height: (window.innerHeight / emojis.length) * factor };\n\tconsole.log(scale);\n\n\tconst draw = (ctx) => {\n\t\tctx.fillStyle = '#fff';\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\t\tctx.fillStyle = '#000000';\n\t\tctx.font = (antalbogstaver * height) / width_ratio / width + 'px serif';\n\t\tfor (let i = 0; i < emojis.length; i++) {\n\t\t\tctx.fillText(emojis[i], 0, i * scale.height);\n\t\t}\n\t\tctx.fill();\n\t};\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\tlet animationFrameId;\n\n\t\tdraw(context);\n\n\t\treturn () => {\n\t\t\twindow.cancelAnimationFrame(animationFrameId);\n\t\t};\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t{/* {emojis.map((row, rowindex) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={'row:' + rowindex} style={{ padding: 0, height: '7px', width: '95%', margin: '0 auto' }}>\n\t\t\t\t\t\t{row.map((emoji, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\tkey={rowindex + ':' + index}\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'inline-block', margin: 0, padding: '1px', fontSize: 100 / row.length + 'em', width: 100 / row.length + '%', boxSizing: 'border-box' }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{emoji === 'empty' ? '\\u00A0' : emoji}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})} */}\n\t\t\t<canvas ref={canvasRef} width={emojis[0].length * scale.width + 'px'} height={emojis.length * scale.height + 'px'} style={{ marginLeft: '10%' }}></canvas>\n\t\t</div>\n\t);\n};\n\nexport default EmojiImage;\n"]},"metadata":{},"sourceType":"module"}