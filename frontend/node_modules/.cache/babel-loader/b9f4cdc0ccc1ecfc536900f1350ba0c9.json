{"ast":null,"code":"var _jsxFileName = \"/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmojiImage = _ref => {\n  _s();\n\n  let {\n    emojis,\n    backgroundColor\n  } = _ref;\n  const canvasRef = useRef(null);\n  const factor = 0.65;\n  const scale = {\n    width: window.innerWidth / emojis[0].length * factor,\n    height: window.innerHeight / emojis.length * factor\n  };\n\n  const draw = ctx => {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000';\n    const fontSize = ctx.canvas.width / (emojis[0].length * (10 / 8));\n    console.log(fontSize);\n    ctx.font = fontSize + 'px serif';\n\n    for (let i = 0; i < emojis.length; i++) {\n      ctx.fillText(emojis[i], 0, i * scale.height);\n    }\n\n    ctx.fill();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let animationFrameId;\n    draw(context);\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: emojis[0].length * scale.width + 'px',\n      height: emojis.length * scale.height + 'px'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this);\n};\n\n_s(EmojiImage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = EmojiImage;\nexport default EmojiImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmojiImage\");","map":{"version":3,"sources":["/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js"],"names":["React","useRef","useEffect","EmojiImage","emojis","backgroundColor","canvasRef","factor","scale","width","window","innerWidth","length","height","innerHeight","draw","ctx","fillStyle","fillRect","canvas","fontSize","console","log","font","i","fillText","fill","current","context","getContext","animationFrameId","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,UAAU,GAAG,QAAiC;AAAA;;AAAA,MAAhC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAgC;AACnD,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMM,MAAM,GAAG,IAAf;AACA,QAAMC,KAAK,GAAG;AAAEC,IAAAA,KAAK,EAAGC,MAAM,CAACC,UAAP,GAAoBP,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAA/B,GAAyCL,MAAlD;AAA0DM,IAAAA,MAAM,EAAGH,MAAM,CAACI,WAAP,GAAqBV,MAAM,CAACQ,MAA7B,GAAuCL;AAAzG,GAAd;;AAEA,QAAMQ,IAAI,GAAIC,GAAD,IAAS;AACrBA,IAAAA,GAAG,CAACC,SAAJ,GAAgBZ,eAAhB;AACAW,IAAAA,GAAG,CAACE,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBF,GAAG,CAACG,MAAJ,CAAWV,KAA9B,EAAqCO,GAAG,CAACG,MAAJ,CAAWN,MAAhD;AACAG,IAAAA,GAAG,CAACC,SAAJ,GAAgB,SAAhB;AACA,UAAMG,QAAQ,GAAGJ,GAAG,CAACG,MAAJ,CAAWV,KAAX,IAAoBL,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,IAAoB,KAAK,CAAzB,CAApB,CAAjB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAJ,IAAAA,GAAG,CAACO,IAAJ,GAAWH,QAAQ,GAAG,UAAtB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,MAAM,CAACQ,MAA3B,EAAmCY,CAAC,EAApC,EAAwC;AACvCR,MAAAA,GAAG,CAACS,QAAJ,CAAarB,MAAM,CAACoB,CAAD,CAAnB,EAAwB,CAAxB,EAA2BA,CAAC,GAAGhB,KAAK,CAACK,MAArC;AACA;;AACDG,IAAAA,GAAG,CAACU,IAAJ;AACA,GAXD;;AAaAxB,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMiB,MAAM,GAAGb,SAAS,CAACqB,OAAzB;AACA,UAAMC,OAAO,GAAGT,MAAM,CAACU,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAIC,gBAAJ;AAEAf,IAAAA,IAAI,CAACa,OAAD,CAAJ;AAEA,WAAO,MAAM;AACZlB,MAAAA,MAAM,CAACqB,oBAAP,CAA4BD,gBAA5B;AACA,KAFD;AAGA,GAVQ,CAAT;AAYA,sBACC;AAAA,2BACC;AAAQ,MAAA,GAAG,EAAExB,SAAb;AAAwB,MAAA,KAAK,EAAEF,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,GAAmBJ,KAAK,CAACC,KAAzB,GAAiC,IAAhE;AAAsE,MAAA,MAAM,EAAEL,MAAM,CAACQ,MAAP,GAAgBJ,KAAK,CAACK,MAAtB,GAA+B;AAA7G;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAnCD;;GAAMV,U;;KAAAA,U;AAqCN,eAAeA,UAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst EmojiImage = ({ emojis, backgroundColor }) => {\n\tconst canvasRef = useRef(null);\n\tconst factor = 0.65;\n\tconst scale = { width: (window.innerWidth / emojis[0].length) * factor, height: (window.innerHeight / emojis.length) * factor };\n\n\tconst draw = (ctx) => {\n\t\tctx.fillStyle = backgroundColor;\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\t\tctx.fillStyle = '#000000';\n\t\tconst fontSize = ctx.canvas.width / (emojis[0].length * (10 / 8));\n\t\tconsole.log(fontSize);\n\t\tctx.font = fontSize + 'px serif';\n\t\tfor (let i = 0; i < emojis.length; i++) {\n\t\t\tctx.fillText(emojis[i], 0, i * scale.height);\n\t\t}\n\t\tctx.fill();\n\t};\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\tlet animationFrameId;\n\n\t\tdraw(context);\n\n\t\treturn () => {\n\t\t\twindow.cancelAnimationFrame(animationFrameId);\n\t\t};\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<canvas ref={canvasRef} width={emojis[0].length * scale.width + 'px'} height={emojis.length * scale.height + 'px'}></canvas>\n\t\t</div>\n\t);\n};\n\nexport default EmojiImage;\n"]},"metadata":{},"sourceType":"module"}