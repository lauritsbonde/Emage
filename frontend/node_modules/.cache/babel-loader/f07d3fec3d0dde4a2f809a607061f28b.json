{"ast":null,"code":"var _jsxFileName = \"/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmojiImage = _ref => {\n  _s();\n\n  let {\n    emojis\n  } = _ref;\n  const [backgroundColor, setBackgroundColor] = useState('#fff');\n\n  const validateHex = hex => {\n    const hexRegex = /^#([A-Fa-f0-9]{6})$/;\n\n    if (hexRegex.test(hex)) {\n      setBackgroundColor(hex);\n    }\n  };\n\n  const canvasRef = useRef(null);\n  const factor = 0.65;\n  const scale = {\n    width: window.innerWidth / emojis[0].length * factor,\n    height: window.innerHeight / emojis.length * factor\n  };\n  console.log(scale);\n\n  const draw = ctx => {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000';\n    const fontSize = ctx.canvas.width / (emojis[0].length * (10 / 8));\n    console.log(fontSize);\n    ctx.font = fontSize + 'px serif';\n\n    for (let i = 0; i < emojis.length; i++) {\n      ctx.fillText(emojis[i], 0, i * scale.height);\n    }\n\n    ctx.fill();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let animationFrameId;\n    draw(context);\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => validateHex(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: emojis[0].length * scale.width + 'px',\n      height: emojis.length * scale.height + 'px',\n      style: {\n        marginLeft: '10%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n};\n\n_s(EmojiImage, \"APPoPijKCnNakdKGIU7ZcF/+mJ4=\");\n\n_c = EmojiImage;\nexport default EmojiImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmojiImage\");","map":{"version":3,"sources":["/Users/lauritsbonde/Desktop/Arbejde/Emage/frontend/src/EmojiImage.js"],"names":["React","useRef","useEffect","useState","EmojiImage","emojis","backgroundColor","setBackgroundColor","validateHex","hex","hexRegex","test","canvasRef","factor","scale","width","window","innerWidth","length","height","innerHeight","console","log","draw","ctx","fillStyle","fillRect","canvas","fontSize","font","i","fillText","fill","current","context","getContext","animationFrameId","cancelAnimationFrame","e","target","value","marginLeft"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nconst EmojiImage = ({ emojis }) => {\n\tconst [backgroundColor, setBackgroundColor] = useState('#fff');\n\n\tconst validateHex = (hex) => {\n\t\tconst hexRegex = /^#([A-Fa-f0-9]{6})$/;\n\t\tif (hexRegex.test(hex)) {\n\t\t\tsetBackgroundColor(hex);\n\t\t}\n\t};\n\n\tconst canvasRef = useRef(null);\n\tconst factor = 0.65;\n\tconst scale = { width: (window.innerWidth / emojis[0].length) * factor, height: (window.innerHeight / emojis.length) * factor };\n\tconsole.log(scale);\n\n\tconst draw = (ctx) => {\n\t\tctx.fillStyle = backgroundColor;\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\t\tctx.fillStyle = '#000000';\n\t\tconst fontSize = ctx.canvas.width / (emojis[0].length * (10 / 8));\n\t\tconsole.log(fontSize);\n\t\tctx.font = fontSize + 'px serif';\n\t\tfor (let i = 0; i < emojis.length; i++) {\n\t\t\tctx.fillText(emojis[i], 0, i * scale.height);\n\t\t}\n\t\tctx.fill();\n\t};\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\tlet animationFrameId;\n\n\t\tdraw(context);\n\n\t\treturn () => {\n\t\t\twindow.cancelAnimationFrame(animationFrameId);\n\t\t};\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<input type=\"text\" onChange={(e) => validateHex(e.target.value)} />\n\t\t\t<canvas ref={canvasRef} width={emojis[0].length * scale.width + 'px'} height={emojis.length * scale.height + 'px'} style={{ marginLeft: '10%' }}></canvas>\n\t\t</div>\n\t);\n};\n\nexport default EmojiImage;\n"]},"metadata":{},"sourceType":"module"}