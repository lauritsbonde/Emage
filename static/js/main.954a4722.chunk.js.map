{"version":3,"sources":["EmojiImage.js","App.js","reportWebVitals.js","index.js","Styles/app.module.css"],"names":["EmojiImage","emojis","backgroundColor","scaling","emojiSize","setEmojiSize","canvasRef","useRef","scale","window","innerWidth","length","innerHeight","useEffect","context","current","getContext","fontSize","canvas","width","ctx","fillStyle","fillRect","height","font","i","fillText","fill","draw","ref","onClick","link","document","createElement","download","href","toDataURL","click","App","useState","image","setImage","emojiImage","setEmojiImage","setBackgroundColor","setScale","validateEmojiSize","style","textAlign","className","appStyle","app","onSubmit","event","preventDefault","formData","FormData","append","fetchUrl","location","hostname","fetch","method","headers","enctype","body","then","res","json","data","success","catch","err","console","log","imageUpload","type","onChange","target","files","name","value","src","URL","createObjectURL","alt","inputs","rightInput","e","hex","test","placeholder","validateScale","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.954a4722.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst EmojiImage = ({ emojis, backgroundColor, scaling, emojiSize, setEmojiSize }) => {\n\tconst canvasRef = useRef(null);\n\tconst scale = { width: (window.innerWidth / emojis[0].length) * scaling, height: (window.innerHeight / emojis.length) * scaling };\n\n\tconst draw = (ctx) => {\n\t\tctx.fillStyle = backgroundColor;\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\t\tctx.fillStyle = '#000000';\n\t\tctx.font = emojiSize + 'px serif';\n\t\tfor (let i = 0; i < emojis.length; i++) {\n\t\t\tctx.fillText(emojis[i], 0, i * scale.height);\n\t\t}\n\t\tctx.fill();\n\t};\n\n\t// download canvas as png\n\tconst download = () => {\n\t\tconst link = document.createElement('a');\n\t\tlink.download = 'emoji.png';\n\t\tlink.href = canvasRef.current.toDataURL();\n\t\tlink.click();\n\t};\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\tconst fontSize = context.canvas.width / (emojis[0].length * (10 / 8));\n\t\tsetEmojiSize(fontSize);\n\n\t\tdraw(context);\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<canvas ref={canvasRef} width={emojis[0].length * scale.width + 'px'} height={emojis.length * scale.height + 'px'}></canvas>\n\t\t\t<br />\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdownload();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tDownload Image\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default EmojiImage;\n","import { useState } from 'react';\nimport EmojiImage from './EmojiImage';\nimport appStyle from './Styles/app.module.css';\n\nfunction App() {\n\tconst [image, setImage] = useState(null);\n\tconst [emojiImage, setEmojiImage] = useState(null);\n\tconst [backgroundColor, setBackgroundColor] = useState('#fff');\n\tconst [scale, setScale] = useState(0.75);\n\tconst [emojiSize, setEmojiSize] = useState(4.5);\n\n\tconst uploadImage = (event) => {\n\t\tevent.preventDefault();\n\t\tconst formData = new FormData();\n\t\tformData.append('image', image);\n\t\tconst fetchUrl = window.location.hostname === 'localhost' ? 'http://localhost:2020/' : 'https://emagecreator.herokuapp.com/';\n\t\tfetch(fetchUrl + 'convert', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tenctype: 'multipart/form-data',\n\t\t\t},\n\t\t\tbody: formData,\n\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tres.json().then((data) => {\n\t\t\t\t\tif (data.success) {\n\t\t\t\t\t\tsetEmojiImage(data.emojis);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\tconst validateHex = (hex) => {\n\t\tconst hexRegex = /^#([A-Fa-f0-9]{6})$/;\n\t\tif (hexRegex.test(hex)) {\n\t\t\tsetBackgroundColor(hex);\n\t\t}\n\t};\n\n\tconst validateScale = (scale) => {\n\t\tif (scale > 0 && scale <= 1) {\n\t\t\tsetScale(scale);\n\t\t}\n\t};\n\n\tconst validateEmojiSize = (emojiSize) => {\n\t\tif (emojiSize > 0 && emojiSize <= 40) {\n\t\t\tsetEmojiSize(emojiSize);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div style={{ textAlign: 'center' }}>\n\t\t\t<h1>Image to emojiImage</h1>\n\t\t\t<div className={appStyle.app}>\n\t\t\t\t<form onSubmit={uploadImage} className={appStyle.imageUpload}>\n\t\t\t\t\t<input type=\"file\" onChange={(event) => setImage(event.target.files[0])} name=\"image\" />\n\t\t\t\t\t<input type=\"submit\" value=\"Upload image\" />\n\t\t\t\t</form>\n\t\t\t\t{image && <img src={URL.createObjectURL(image)} className={appStyle.image} alt=\"uploaded\" />}\n\t\t\t\t<div className={appStyle.inputs}>\n\t\t\t\t\t<p className={appStyle.rightInput}>\n\t\t\t\t\t\tHex Background color: <input type=\"text\" onChange={(e) => validateHex(e.target.value)} placeholder=\"#000000\" />\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className={appStyle.rightInput}>\n\t\t\t\t\t\tScale: <input type=\"number\" onChange={(e) => validateScale(e.target.value)} placeholder=\"0.75\" /> (0 - 1)\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className={appStyle.rightInput}>\n\t\t\t\t\t\tEmoji size: <input type=\"number\" onChange={(e) => validateEmojiSize(e.target.value)} placeholder=\"4.5\" /> (1 - 40)\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{emojiImage && <EmojiImage emojis={emojiImage} backgroundColor={backgroundColor} scaling={scale} emojiSize={emojiSize} setEmojiSize={validateEmojiSize} />}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__1gXNt\",\"imageUpload\":\"app_imageUpload__3m10J\",\"image\":\"app_image__1aEpj\",\"inputs\":\"app_inputs__20uYk\",\"rightInput\":\"app_rightInput__3ABFw\"};"],"sourceRoot":""}