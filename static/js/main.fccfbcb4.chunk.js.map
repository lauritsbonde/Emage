{"version":3,"sources":["EmojiImage.js","App.js","reportWebVitals.js","index.js","Styles/app.module.css"],"names":["EmojiImage","emojis","backgroundColor","scaling","canvasRef","useRef","scale","window","innerWidth","length","innerHeight","useEffect","ctx","fillStyle","fillRect","canvas","width","height","fontSize","font","i","fillText","console","log","fill","draw","current","getContext","cancelAnimationFrame","animationFrameId","ref","onClick","link","document","createElement","download","href","toDataURL","click","App","useState","image","setImage","emojiImage","setEmojiImage","setBackgroundColor","setScale","style","textAlign","className","appStyle","app","onSubmit","event","preventDefault","formData","FormData","append","fetch","fetchUrl","method","headers","enctype","body","then","res","json","data","success","catch","err","imageUpload","type","onChange","target","files","name","value","src","URL","createObjectURL","class","alt","inputs","e","hex","test","placeholder","validateScale","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.fccfbcb4.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst EmojiImage = ({ emojis, backgroundColor, scaling }) => {\n\tconst canvasRef = useRef(null);\n\tconst scale = { width: (window.innerWidth / emojis[0].length) * scaling, height: (window.innerHeight / emojis.length) * scaling };\n\n\tconst draw = (ctx) => {\n\t\tctx.fillStyle = backgroundColor;\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\t\tctx.fillStyle = '#000000';\n\t\tconst fontSize = ctx.canvas.width / (emojis[0].length * (10 / 8));\n\t\tctx.font = fontSize + 'px serif';\n\t\tfor (let i = 0; i < emojis.length; i++) {\n\t\t\tctx.fillText(emojis[i], 0, i * scale.height);\n\t\t\tconsole.log(emojis[i]);\n\t\t}\n\t\tctx.fill();\n\t};\n\n\t// download canvas as png\n\tconst download = () => {\n\t\tconst link = document.createElement('a');\n\t\tlink.download = 'emoji.png';\n\t\tlink.href = canvasRef.current.toDataURL();\n\t\tlink.click();\n\t};\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\tlet animationFrameId;\n\n\t\tdraw(context);\n\n\t\treturn () => {\n\t\t\twindow.cancelAnimationFrame(animationFrameId);\n\t\t};\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<canvas ref={canvasRef} width={emojis[0].length * scale.width + 'px'} height={emojis.length * scale.height + 'px'}></canvas>\n\t\t\t<br />\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdownload();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tDownload Image\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default EmojiImage;\n","import { useState } from 'react';\nimport EmojiImage from './EmojiImage';\nimport appStyle from './Styles/app.module.css';\n\nfunction App() {\n\tconst [image, setImage] = useState(null);\n\tconst [emojiImage, setEmojiImage] = useState(null);\n\tconst [backgroundColor, setBackgroundColor] = useState('#fff');\n\tconst [scale, setScale] = useState(0.75);\n\n\tconst uploadImage = (event) => {\n\t\tevent.preventDefault();\n\t\tconst formData = new FormData();\n\t\tformData.append('image', image);\n\t\tconst fetchUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:2020/' : 'https://emagecreator.herokuapp.com/';\n\t\tfetch(fetchUrl + 'convert', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tenctype: 'multipart/form-data',\n\t\t\t},\n\t\t\tbody: formData,\n\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tres.json().then((data) => {\n\t\t\t\t\tif (data.success) {\n\t\t\t\t\t\tsetEmojiImage(data.emojis);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\tconst validateHex = (hex) => {\n\t\tconst hexRegex = /^#([A-Fa-f0-9]{6})$/;\n\t\tif (hexRegex.test(hex)) {\n\t\t\tsetBackgroundColor(hex);\n\t\t}\n\t};\n\n\tconst validateScale = (scale) => {\n\t\tif (scale > 0 && scale <= 1) {\n\t\t\tsetScale(scale);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div style={{ textAlign: 'center' }}>\n\t\t\t<h1>Image to emojiImage</h1>\n\t\t\t<div className={appStyle.app}>\n\t\t\t\t<form onSubmit={uploadImage} className={appStyle.imageUpload}>\n\t\t\t\t\t<input type=\"file\" onChange={(event) => setImage(event.target.files[0])} name=\"image\" />\n\t\t\t\t\t<input type=\"submit\" value=\"Upload image\" />\n\t\t\t\t</form>\n\t\t\t\t{image && <img src={URL.createObjectURL(image)} class={appStyle.image} alt=\"uploaded\" />}\n\t\t\t\t<div className={appStyle.inputs}>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tHex Background color: <input type=\"text\" onChange={(e) => validateHex(e.target.value)} placeholder=\"#000000\" />\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tScale: <input type=\"number\" onChange={(e) => validateScale(e.target.value)} placeholder=\"0.75\" /> (0 - 1)\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{emojiImage && <EmojiImage emojis={emojiImage} backgroundColor={backgroundColor} scaling={scale} />}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__1gXNt\",\"imageUpload\":\"app_imageUpload__3m10J\",\"image\":\"app_image__1aEpj\",\"inputs\":\"app_inputs__20uYk\"};"],"sourceRoot":""}